[1mdiff --git a/Makefile b/Makefile[m
[1mindex b18e8e7..46cdb52 100644[m
[1m--- a/Makefile[m
[1m+++ b/Makefile[m
[36m@@ -195,6 +195,7 @@[m [mUPROGS=\[m
 	_usertests\[m
 	_wc\[m
 	_zombie\[m
[32m+[m	[32m_screen\[m
 [m
 fs.img: mkfs $(UPROGS)[m
 	./mkfs fs.img $(UPROGS)[m
[1mdiff --git a/console.c b/console.c[m
[1mindex a330c97..925bc24 100644[m
[1m--- a/console.c[m
[1m+++ b/console.c[m
[36m@@ -16,7 +16,49 @@[m
 #include "x86.h"[m
 [m
 #define INPUT_BUF 128[m
[32m+[m[32m#define BUFFER_SIZE 80 *25[m
[32m+[m[32mstatic int active_console;[m
 [m
[32m+[m[32m int check_active_console(){[m
[32m+[m[32m    struct proc* current_proc = myproc();[m
[32m+[m[32m    if (current_proc == 0) {[m
[32m+[m[32m        return 1;[m
[32m+[m[32m    }[m
[32m+[m[32m    if (current_proc->console_id == active_console)[m
[32m+[m[32m    {[m[41m [m
[32m+[m[32m        return 1;[m
[32m+[m[41m    [m
[32m+[m[32m    }[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mstatic struct {[m
[32m+[m[32m    ushort  videobuffer[BUFFER_SIZE];[m
[32m+[m[32m    int     cursorposition;[m
[32m+[m[32m    int     flag;[m
[32m+[m[32m} consbuffer[MAXCONSOLE];[m
[32m+[m
[32m+[m[32m int flag_finder()[m
[32m+[m[32m{[m
[32m+[m[32m    for (int i = 0; i < MAXCONSOLE ; i++)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (consbuffer[i].flag  == 0)[m
[32m+[m[32m        {[m
[32m+[m[32m            return i;[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m    }[m
[32m+[m[32m    return -1;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m void set_flag(int id, int flag)[m
[32m+[m[32m{[m
[32m+[m[32m    consbuffer[id].flag = flag;[m
[32m+[m
[32m+[m[32m}[m
 struct kbdbuffer {[m
     char buf[INPUT_BUF];[m
     uint r;  // Read index[m
[36m@@ -68,7 +110,6 @@[m [mstatic void printint(int xx, int base, int sign) {[m
         consputc(buf[i]);[m
     }[m
 }[m
[31m-[m
 // Print to the console. only understands %d, %x, %p, %s.[m
 void cprintf(char *fmt, ...) {[m
     int i, c, locking;[m
[36m@@ -150,14 +191,54 @@[m [mvoid panic(char *s) {[m
 #define CRTPORT 0x3d4[m
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory[m
 [m
[32m+[m
[32m+[m[32mstatic void sethardwarecursorposition(int position) {[m
[32m+[m	[32moutb(CRTPORT, 14);[m
[32m+[m	[32moutb(CRTPORT + 1, (position >> 8) & 0xFF);[m
[32m+[m	[32moutb(CRTPORT, 15);[m
[32m+[m	[32moutb(CRTPORT + 1, position & 0xFF);[m
[32m+[m[32m}[m
[32m+[m[32mint gethardwarecursorposition() {[m
[32m+[m	[32mint position;[m
[32m+[m
[32m+[m	[32moutb(CRTPORT, 14);[m
[32m+[m	[32mposition = inb(CRTPORT + 1) << 8;[m
[32m+[m	[32moutb(CRTPORT, 15);[m
[32m+[m	[32mposition |= inb(CRTPORT + 1);[m
[32m+[m	[32mreturn position;[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid grabscreentobuffer(int id) {[m
[32m+[m	[32mmemmove(&consbuffer[id].videobuffer[0], crt, sizeof(ushort) * 80 * 25);[m
[32m+[m	[32mconsbuffer[id].cursorposition = gethardwarecursorposition();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid outputbuffertoscreen(int id) {[m
[32m+[m	[32mmemmove(crt, &consbuffer[id].videobuffer[0], sizeof(ushort) * 80 * 25);[m
[32m+[m	[32msethardwarecursorposition(consbuffer[id].cursorposition);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid switchConsole(int id)[m
[32m+[m[32m{[m
[32m+[m[32m    int oldId = active_console;[m
[32m+[m[32m    active_console = id;[m
[32m+[m[32m    grabscreentobuffer(oldId);[m
[32m+[m[32m    outputbuffertoscreen(id);[m
[32m+[m
[32m+[m[32m}[m
 static void cgaputc(int c) {[m
     int pos;[m
[32m+[m[32m    ushort * videomemory;[m
 [m
[31m-    // Cursor position: col + 80*row.[m
[31m-    outb(CRTPORT, 14);[m
[31m-    pos = inb(CRTPORT + 1) << 8;[m
[31m-    outb(CRTPORT, 15);[m
[31m-    pos |= inb(CRTPORT + 1);[m
[32m+[m[32m    if (!check_active_console()) {[m
[32m+[m[32m        pos = consbuffer[myproc()->console_id].cursorposition;[m
[32m+[m[32m        videomemory = &consbuffer[myproc()->console_id].videobuffer[0];[m
[32m+[m[32m    }[m
[32m+[m[32m    else {[m
[32m+[m[32m        pos = gethardwarecursorposition();[m
[32m+[m[32m        videomemory = crt;[m
[32m+[m[32m    }[m
 [m
     if (c == '\n') {[m
         pos += 80 - pos % 80;[m
[36m@@ -168,7 +249,7 @@[m [mstatic void cgaputc(int c) {[m
         }[m
     }[m
     else {[m
[31m-        crt[pos++] = (c & 0xff) | 0x0700;  // black on white[m
[32m+[m[32m        videomemory[pos++] = (c & 0xff) | 0x0700;  // black on white[m
 [m
     }[m
     if (pos < 0 || pos > 25 * 80) {[m
[36m@@ -176,18 +257,20 @@[m [mstatic void cgaputc(int c) {[m
     }[m
 [m
     if ((pos / 80) >= 24) { // Scroll up.[m
[31m-        memmove(crt, crt + 80, sizeof(crt[0]) * 23 * 80);[m
[32m+[m[32m        memmove(videomemory, videomemory + 80, sizeof(videomemory[0]) * 23 * 80);[m
         pos -= 80;[m
[31m-        memset(crt + pos, 0, sizeof(crt[0]) * (24 * 80 - pos));[m
[32m+[m[32m        memset(videomemory + pos, 0, sizeof(videomemory[0]) * (24 * 80 - pos));[m
     }[m
[31m-[m
[31m-    outb(CRTPORT, 14);[m
[31m-    outb(CRTPORT + 1, pos >> 8);[m
[31m-    outb(CRTPORT, 15);[m
[31m-    outb(CRTPORT + 1, pos);[m
[31m-    crt[pos] = ' ' | 0x0700;[m
[32m+[m[32m    if (check_active_console()) {[m
[32m+[m[32m        sethardwarecursorposition(pos);[m
[32m+[m[32m    }[m
[32m+[m[32m    else {[m
[32m+[m[32m        consbuffer[myproc()->console_id].cursorposition = pos;[m
[32m+[m[32m    }[m
[32m+[m[32m    videomemory[pos] = ' ' | 0x0700;[m
 }[m
 [m
[32m+[m
 void consputc(int c) {[m
     if (panicked) {[m
         cli();[m
[36m@@ -282,20 +365,29 @@[m [mint consoleread(struct inode *ip, char *dst, int n) {[m
             }[m
             sleep(&(input->r), &cons.lock);[m
         }[m
[31m-        c = input->buf[input->r++ % INPUT_BUF];[m
[31m-        if (c == C('D')) { // EOF[m
[31m-            if (n < target) {[m
[31m-                // Save ^D for next time, to make sure[m
[31m-                // caller gets a 0-byte result.[m
[31m-                input->r--;[m
[32m+[m[32m        if (check_active_console())[m
[32m+[m[32m        {[m
[32m+[m[41m                [m
[32m+[m[32m            c = input->buf[input->r++ % INPUT_BUF];[m
[32m+[m[32m            if (c == C('D')) { // EOF[m
[32m+[m[32m                if (n < target) {[m
[32m+[m[32m                    // Save ^D for next time, to make sure[m
[32m+[m[32m                    // caller gets a 0-byte result.[m
[32m+[m[32m                    input->r--;[m
[32m+[m[32m                }[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[32m            *dst++ = c;[m
[32m+[m[32m            --n;[m
[32m+[m[32m            if (c == '\n') {[m
[32m+[m[32m                break;[m
             }[m
[31m-            break;[m
         }[m
[31m-        *dst++ = c;[m
[31m-        --n;[m
[31m-        if (c == '\n') {[m
[31m-            break;[m
[32m+[m[32m        else[m
[32m+[m[32m        {[m
[32m+[m[32m            sleep(&(input->r), &cons.lock);[m
         }[m
[32m+[m[41m    [m
     }[m
     release(&cons.lock);[m
     ilock(ip);[m
[36m@@ -319,6 +411,7 @@[m [mint consolewrite(struct inode *ip, char *buf, int n) {[m
 [m
 void consoleinit(void) {[m
     initlock(&cons.lock, "console");[m
[32m+[m[32m    consbuffer[0].flag = 1;[m
 [m
     // Initialise pointer to point to our console input buffer[m
     input = &inputBuffer;[m
[1mdiff --git a/defs.h b/defs.h[m
[1mindex 02710a1..07f14de 100644[m
[1m--- a/defs.h[m
[1m+++ b/defs.h[m
[36m@@ -22,6 +22,9 @@[m [mvoid            cprintf(char*, ...);[m
 void            consoleintr(int (*)(void));[m
 int             consoleget(void);[m
 void            panic(char*) __attribute__((noreturn));[m
[32m+[m[32mint             flag_finder();[m
[32m+[